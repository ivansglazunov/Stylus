osws-options--prefixes ?= webkit moz o ms official khtml

// options cross-browser generator
osws-options--generate(option, args, only = null, ignore = null, vendor = true)
	needNormalize = !vendor or option in ('transition' 'transition-property' 'border-image' 'border-image-slice')
	for prefix in osws-options--prefixes
		unless (only and !(prefix in only)) or (ignore and prefix in ignore)
			if official == prefix
				if needNormalize
					{option}: osws-options-generate--normalize(option,('%s' % args))
				else
					{option}: args
			else
				newprop = option
				newprop = '-' + prefix + '-' + option if vendor

				if needNormalize
					{newprop}: osws-options-generate--normalize(option,('%s' % args),prefix)
				else
					{newprop}: args


// = to cross-browser
// + add syntax
// Ã— new options


// position

// position +
// ^[(z-index) unit/inherit]{1} [(position) static/absolute/fixed/relative/inherit]{1} [(direction) top/right/bottom/left unit]{1,4}
position()
	result = {}
	key = null
	for argument, a in arguments
		key = arguments[a - 1] if a > 0
		if argument in (static absolute fixed relative)
			result['position'] = argument
		else if argument in (top right bottom left)
			result['' + argument] = 0
		else if argument is a 'unit' or argument is inherit
			if key in (top right bottom left position z-index)
				if key is position
					result['position'] = argument
				else if key is z-index
					result['z-index'] = argument
				else
					result[''+key] = argument
			else
				if argument is inherit
					result['position'] = argument
				else
					result['z-index'] = argument
	for key, value in result
		{key}: value;

// static/absolute/fixed/relative
// ^[(z-index) unit]{1} [(direction) top/right/bottom/left unit]{1,4}
static()
	push(arguments, static)
	position arguments
absolute()
	push(arguments, absolute)
	position arguments
fixed()
	push(arguments, fixed)
	position arguments
relative()
	push(arguments, relative)
	position arguments


// background

// options background css3 generator
osws-options-background--generate(option, args)
	_args = null
	importance = unquote('')
	for subargs in args
		for arg in subargs
			if arg in (border-box padding-box content-box)
				arg = unquote('border') if arg == border-box
				arg = unquote('padding') if arg == padding-box
				arg = unquote('content') if arg == content-box
			if arg != '!important'
				push(_args,arg)
			else
				importance = !important
	osws-options--generate(option, unquote(join(', ',_args)) importance, only: moz webkit)

// background

// directions in (top right bottom left)
// repeats in (repeat no-repeat repeat-x repeat-y space round)

// ^[inherit]
// [[fixed/scroll]{1}/attachment inherit]
// [[rgba/transparent]{1}/color inherit]
// [[call(url())/linear-gradient()]{1}/image inherit]
// [[directions/unit]{1,2}/position inherit]
// [[repeats]{1}/repeat inherit]

background()
	if arguments[0] is inherit
		background: inherit
	else
		-background-position = null
		-background-image = null
		key = null
		result = {}
		for argument, a in arguments
			key = arguments[a - 1] if a > 0
			if argument is inherit
				if key and key in (attachment color image position repeat)
					result[''+key] = argument
			else if argument in (fixed scroll) // auto detect attachment
				result['attachment'] = argument;
			else if argument in (transparent) or argument is a 'rgba' // auto detect color
				result['color'] = argument;
			else if argument is a 'call' // auto detect image
				-background-image = argument
			else if argument in (top right bottom left) or argument is a 'unit' // auto detect position
				if length(-background-position) < 3
					push(-background-position, argument)
			else if argument in (repeat no-repeat repeat-x repeat-y space round) // auto detect repeat
				result['repeat'] = argument
		for key, value in result
			background-{key}: value;
		if -background-position is not null
			background-position: -background-position
		if -background-image is not null
			if match('-gradient\(', ''+-background-image)
				osws-options--generate('background-image', -background-image, vendor: false)
			else if match('url\(', ''+-background-image)
				background-image: -background-image

background-clip()
	if arguments[0] == text
		osws-options--generate('background-clip', arguments, only: webkit moz official)
	else
		osws-options-background--generate('background-clip', arguments)
		background-clip: arguments

background-origin()
	osws-options-background--generate('background-origin', arguments, only: webkit moz official)
	background-origin: arguments

background-size()
	osws-options--generate('background-size', arguments, only: webkit moz official)

background-image()
	if match('-gradient\(', ''+arguments)
		osws-options--generate('background-image', arguments, vendor: false)
	else
		background-image arguments


// border

// border
// [[top/right/bottom/left] ^[inherit] [[width] [unit/medium/xx-small/x-small/small/large/x-large/xx-large/smaller/larger/length/initial/inherit]{1,4}] [[style] [dotted/dashed/solid/double/groove/ridge/inset/outset/inherit]{1,4}] [[color] [rgba/inherit]{1,4}]]
border()
	widths = null
	styles = null
	colors = null
	radius = null
	
	direction = null
	key = null

	for argument, a in arguments
		if argument in (top right bottom left)
			unless direction
				border-width: widths; if widths is not null
				border-style: styles; if styles is not null
				border-color: colors; if colors is not null
			direction = argument
			key = null
		else if direction
			if argument is a 'unit'
				border-{direction}-width: argument;
			if argument in (dotted dashed solid double groove ridge inset outset)
				border-{direction}-style: argument;
			if argument is a 'rgba'
				border-{direction}-color: argument;
			if argument is inherit
				if arguments[a - 1] in (width style color)
					border-{direction}-{arguments[a - 1]}: inherit;
				else
					border-{direction}: inherit;
		else
			if length(width) < 5 and argument is a 'unit'
				push(widths, argument)
			else if length(styles) < 5 and argument in (dotted dashed solid double groove ridge inset outset)
				push(styles, argument)
			else if length(colors) < 5 and argument is a 'rgba'
				push(colors, argument)
			else if argument is inherit
				if arguments[a - 1] in (width style color)
					border-{arguments[a - 1]}: inherit;
				else
					border: inherit;
	
	unless direction
		border-width: widths; if widths is not null
		border-style: styles; if styles is not null
		border-color: colors; if colors is not null
	
	unless radius
		border-radius: radius;

// border-radius
border-radius()
	osws-options--generate('border-radius', arguments)

// border-image
border-image()
	osws-options--generate('border-image', arguments, only: webkit moz ms o official)


// cursor

// cursor
cursor()
	if match('-gradient\(', ''+arguments)
		osws-options--generate('cursor', arguments, vendor: false)
	else
		cursor arguments


// opacity

// opacity
// http://css-tricks.com/snippets/css/cross-browser-opacity/
opacity(argument)
	if argument in (inherit initial)
		-ms-filter argument
		filter argument
	else if argument is a 'unit'
		num = round(argument * 100)
		if num == 100
			-ms-filter none
			filter none
		else
			-ms-filter '"progid:DXImageTransform.Microsoft.Alpha(Opacity=%s)"' % num
			filter 'alpha(opacity=%s)' % num
	
	osws-options--generate('opacity', argument, only: official moz khtml)


// user-select

// user-select
// http://css-tricks.com/almanac/properties/u/user-select/
user-select()
	osws-options--generate('user-select', arguments, ignore: khtml)


// box

// box-shadow
// http://css-tricks.com/snippets/css/css-box-shadow/
box-shadow()
	osws-options--generate('box-shadow', arguments, only: webkit moz official)

// box-sizing
box-sizing()
	osws-options--generate('box-sizing', arguments, only: webkit moz official)

// box-orient
box-orient()
	osws-options--generate('box-orient', arguments, only: webkit moz official)

// box-flex-group
box-flex-group()
	osws-options--generate('box-flex-group', arguments, only: webkit moz official)

// box-ordinal-group
box-ordinal-group()
	osws-options--generate('box-ordinal-group', arguments, only: webkit moz ms official)

// box-align
box-align()
	osws-options--generate('box-align', arguments, only: webkit moz ms official)

// box-pack
box-pack()
	osws-options--generate('box-pack', arguments, only: webkit moz ms official)

// box-direction
box-direction()
	osws-options--generate('box-direction', arguments, only: webkit moz ms official)


// Text

text-overflow()
	osws-options--generate('text-overflow', arguments, only: official o)

text-size-adjust()
	osws-options--generate('text-size-adjust', arguments, only: official webkit ms)

tab-size()
	osws-options--generate('tab-size', arguments, only: moz o official)

text-size-adjust()
	osws-options--generate('text-size-adjust', arguments)

// Perspective

perspective()
	if mixin
		osws-options--generate('perspective', arguments, only: webkit moz ms official)
	else
		'perspective(%s)' % arguments

perspective-origin()
	osws-options--generate('perspective-origin', arguments, only: webkit moz ms official)

// Transform

transform()
	osws-options--generate('transform', arguments)

transform-origin()
	osws-options--generate('transform-origin', arguments)

transform-style()
	osws-options--generate('transform-style', arguments)

// Transition

transition()
	osws-options--generate('transition', arguments)

transition-property()
	osws-options--generate('transition-property', arguments)

transition-duration()
	osws-options--generate('transition-duration', arguments)

transition-timing-function()
	osws-options--generate('transition-timing-function', arguments)

transition-delay()
	osws-options--generate('transition-delay', arguments)

// other

// backface-visibility
backface-visibility()
	osws-options--generate('backface-visibility', arguments, only: webkit moz ms official)

// hyphens
hyphens()
	osws-options--generate('hyphens', arguments, only: webkit moz ms official)

// appearance
appearance()
	osws-options--generate('appearance', arguments, only: webkit moz official)

// overflow-scrolling
overflow-scrolling()
	osws-options--generate('overflow-scrolling', arguments, only: webkit official)