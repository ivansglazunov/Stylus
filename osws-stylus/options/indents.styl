// margin

// value - `value is a 'unit' or value is auto`
// center - `center`
// direction - `direction in (top right bottom left h hor horizontal v ver vertical)`

// available only to determine the `direction`:
// `^[inherit]{1}` specified  `margin inherit`
// `[value]{1,4}` specified default `margin`
// `[direction]` define that will relate the following values
// available only after determine the `direction`:
// `[value]{1}` sets `margin-{direction}`
// always available
// `[center]` sets `margin-left auto` `margin-right auto`
// `[!important]` sets all options with `!important`

margin()
	margins = ()
	directions = {}
	
	important = ()
	
	axis = false
	
	for argument, a in arguments
		if axis
			axis = false
		else
			if argument is a 'unit' or argument is auto
				if arguments[a - 1] in (top right bottom left)
					directions['' + arguments[a - 1]] = argument
				else if arguments[a - 1] in (h hor horizontal)
					directions.left = argument
					directions.right = argument
					axis = true
					if type(arguments[a + 1]) is 'unit'
						directions.right = arguments[a + 1]
				else if arguments[a - 1] in (v ver vertical)
					directions.top = argument
					directions.bottom = argument
					axis = true
					if type(arguments[a + 1]) is 'unit'
						directions.bottom = arguments[a + 1]
				else if length(margins) < 5
					push(margins, argument)
			else if argument is inherit
				if arguments[a - 1] in (top right bottom left)
					directions['' + arguments[a - 1]] = argument
				else
					margins = inherit
			else if argument is center
				directions.left = auto
				directions.right = auto
			
			else if argument is !important
				important = !important
		
	if length(margins) > 0
		margin: margins important
	
	for key, value in directions
		margin-{key}: value important

// padding

// value - `value is a 'unit' or value is auto`
// direction - `direction in (top right bottom left h hor horizontal v ver vertical)`

// available only to determine the `direction`:
// `^[inherit]{1}` specified  `padding inherit`
// `[value]{1,4}` specified default `padding`
// `[direction]` define that will relate the following values
// available only after determine the `direction`:
// `[value]{1}` sets `padding-{direction}`
// always available
// `[!important]` sets all options with `!important`

padding()
	paddings = ()
	directions = {}
	
	important = ()
	
	axis = false
	
	for argument, a in arguments
		if axis
			axis = false
		else
			if argument is a 'unit' or argument is auto
				if arguments[a - 1] in (top right bottom left)
					directions['' + arguments[a - 1]] = argument
				else if arguments[a - 1] in (h hor horizontal)
					directions.left = argument
					directions.right = argument
					axis = true
					if type(arguments[a + 1]) is 'unit'
						directions.bottom = arguments[a + 1]
				else if arguments[a - 1] in (v ver vertical)
					directions.top = argument
					directions.bottom = argument
					axis = true
					if type(arguments[a + 1]) is 'unit'
						directions.bottom = arguments[a + 1]
				else if length(paddings) < 5
					push(paddings, argument)
			else if argument is inherit
				if arguments[a - 1] in (top right bottom left)
					directions['' + arguments[a - 1]] = argument
				else
					paddings = inherit
			
			else if argument is !important
				important = !important
		
	if length(paddings) > 0
		padding: paddings important
	
	for key, value in directions
		padding-{key}: value important