// triangle

// directions in (top right bottom left)
// color is a 'rgba'
// size is a 'unit'

// [directions]{1,2} specified anywhere sets triangle direction
// [color]{1} specified anywhere sets triangle color
// [size]{1} specified anywhere sets triangle size

triangle()
	border-style solid
	size = 10px
	color = #000
	direction = ()
	content = ''
	
	for argument in arguments
		if argument is a 'unit'
			size = argument
		else if argument is a 'rgba'
			color = argument
		else if argument in (top right bottom left) and length(direction) < 3
			push(direction, argument)
		else if argument is false or argument is a 'string'
			content = argument
	width = size
	width = (size * 2) if length(direction) is 1

	if direction is top
		border-width: 0 width width width
		border-color: transparent transparent color transparent
	else if direction is bottom
		border-width: width width 0 width
		border-color: color transparent transparent transparent
	else if direction is left
		border-width: width width width 0
		border-color: transparent color transparent transparent
	else if direction is right
		border-width: width 0 width width
		border-color: transparent transparent transparent color
	else if top in direction and right in direction
		border-width: 0 width width 0
		border-color: transparent color transparent transparent
	else if top in direction and left in direction
		border-width: width width 0 0
		border-color: color transparent transparent transparent
	else if bottom in direction and right in direction
		border-width: 0 0 width width
		border-color: transparent transparent color transparent
	else if bottom in direction and left in direction
		border-width: width 0 0 width
		border-color: transparent transparent transparent color
	else
		error('unexpected direction: ' + direction)
	
	if content is a 'string'
		if match(':after', selector()) or match(':before', selector())
			content content